#!/bin/bash

SEARCH=envwarden

usage()
{
    echo "envwarden: use Bitwarden to manage server secrets"
    echo ""
    echo "Get your secure environment variables from Bitwarden onto your server."
    echo "envwarden searches your Bitwarden vault for items matching"
    echo "a search criteria (defaults to 'envwarden')."
    echo "Then it goes through all custom fields on every item found"
    echo "and make them available as envirnoment variables."
    echo ""
    echo "Usage: envwarden [--help] [--dotenv] [--search]"
    echo ""
    echo "To export environment variables, use: \`eval \$(envwarden)\`"
    echo "To create an .env file, use: \`envwarden --dotenv > .env\`"
    echo ""
    echo "Options:"
    echo -e "\t-h --help"
    echo -e "\t-d --dotenv (optional) outputs to stdout in .env format"
    echo -e "\t-s --search <keyword> (optional) define the search term for bitwarden items (defaults to $SEARCH)"
    echo ""
    echo "You can use ~/.envwarden to store your credentials (just email, or email:password)"
}

check_version()
{
    printf '%s\n%s' $2 $3 | sort -C -V
    if [ $? == 0 ]; then
        (>&2 echo "$1 $2 found, version $3 or higher is needed")
        exit 1
    fi
}

while [[ $# > 0 ]]; do
    key="$1"
    case $key in
        -h | --help)
            usage
            exit
            ;;
        -d | --dotenv)
            DOTENV=true
            ;;
        -s | --search)
            SEARCH=$2
            shift
            ;;
        *)
            echo "ERROR: unknown parameter \"$PARAM\""
            usage
            exit 1
            ;;
    esac
    shift
done

which jq > /dev/null 2>&1

if [ $? != 0 ]; then
  (>&2 echo "jq command not found" )
  exit 1
fi

JQ_VERSION=`jq --version 2>&1 | cut -f3 -d" "`

check_version "jq" "$JQ_VERSION" "1.6"

if [[ -f $HOME/.envwarden ]]; then
    IFS=':' read -r bw_login bw_password <<< `cat $HOME/.envwarden`
else
    (>&2 echo ".envwarden file not found in $HOME ... prompting for credentials")
fi

bw logout > /dev/null
export BW_SESSION="`bw login $bw_login $bw_password --raw`"
bw sync > /dev/null
if [[ $? != 0 ]]; then
    (>&2 echo "unable to login or sync with bitwarden.")
    exit 1
fi

while read -r key; do
    read -r value
    if [[ -n "$DOTENV" ]]; then
        echo $key=\"$value\"
    else
        # wrap keys and values in single quotes to avoid further interpolation,
        # plus sanitize for single quote symbols to avoid command injection
        quoted_key="$(echo "$key" | sed "s/'/'\"'\"'/g")"
        quoted_value="$(echo "$value" | sed "s/'/'\"'\"'/g")"
        echo export \'$quoted_key\'=\'$quoted_value\'
    fi
done < <(bw list items --search "$SEARCH" |jq -r '.[].fields[]? | select(.name != null) | select(.value != null) | .name, .value')
